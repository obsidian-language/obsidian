//! Sample trigonometry libary made by TheDevConnor
//! Github: https://github.com/TheDevConnor
//! License: BSD 3-Clause

fn factorial(int n) float {
    float res = 1.0;
    for (int i = 2; i <= n; i++) {
        res *= cast(i, float);
    }
    return res;
}

fn pow(float x, int n) float {
    float res = 1.0;
    for (int i = 0; i < n; i++) {
        res *= x;
    }
    return res;
    // return cast(x ** cast(n, float), float);
}

fn abs(float x) float {
    return (x <= 0.0) ? -x : x;
}

fn degToRad(float deg) float {
    float PI = 3.14159265358979323846;
    return deg * PI / 180.0;
}

fn radToDeg(float rad) float {
    float PI = 3.14159265358979323846;
    return rad * 180.0 / PI;
}

fn sin(float x, int terms) float {
    float sin = 0.0;
    for (int n = 0; n < terms; n++) {
        int sign = ((n % 2) == 0) ? 1 : -1;
        sin += cast(sign, float) * pow(x, 2 * n + 1) / factorial(2 * n + 1);
    }
    return sin;
}

fn csc(float x, int terms) float {
    return 1.0 / sin(x, terms);
}

fn arcsin(float x, int terms) float {
    // TODO: Fix this because of codegen error
    // Error: Mixed or unsupported operand types for binary operation
    if (x < -1.0) {
        println("Error: arcsin(x) is undefined for x < -1");
    }
    if (x > 1.0) {
        println("Error: arcsin(x) is undefined for x < -1");
    }
    float arsin = 0.0;
    for (int n = 0; n < terms; n++) {
        int exp = 2 * n + 1;
        arsin += (factorial(2 * n) * pow(x, exp)) / (pow(4.0, n) * pow(factorial(n), 2) * cast(exp, float));
    }
    return arsin;
}

fn cos(float x, int terms) float {
    float cos = 0.0;
    for (int n = 0; n < terms; n++) {
        int sign = ((n % 2) == 0) ? 1 : -1; 
        cos += cast(sign, float) * pow(x, 2 * n) / factorial(2 * n);
    }
    return cos;
}

fn sec(float x, int terms) float {
    return 1.0 / cos(x, terms);
}

fn arccos(float x, int terms) float {
    float PI = 3.14159265358979323846;
    return PI / 2.0 - arcsin(x, terms);
}

fn tan(float x, int terms) float {
    return sin(x, terms) / cos(x, terms);
}

fn cot(float x, int terms) float {
    return cos(x, terms) / sin(x, terms);
}

fn arctan(float x, int terms) float {
    float arctan = 0.0;
    for (int n = 0; n < terms; n++) {
        arctan += pow(-1.0, 2 * n + 1) * pow(x, 2 * n + 1) / cast(2 * n + 1, float);
    }
    return arctan;
}

fn wrapAngle(float angle) float {
    float PI = 3.14159265358979323846;
    return angle % (2.0 * PI);
}

fn normalizeAngle(float angle) float {
    float x = angle;
    float PI = 3.14159265358979323846;
    while (x < -PI) {
        x += 2.0 * PI;
    }
    while (x > PI) {
        x -= 2.0 * PI;
    }
    return x;
}

fn main() int {
    println(normalizeAngle(4.0));
    println(sin(0.5, 10)); // 0.4794255386041834
    return 0;
}
